%token <(int*int)> IF THEN ELSE LET IN INT BOOL CHAR EOF
%token <string*(int*int)> ID STRINGLIT
%token <int*(int*int)> NUM
%token <char*(int*int)> CHARLIT
%token <(int*int)> PLUS MINUS TIMES DIV EQ LTH 
%token <(int*int)> LPAR RPAR LBRACKET RBRACKET LCURLY RCURLY
%token <(int*int)> COMMA
%token <(int*int)> FUN IOTA REPLICATE MAP REDUCE READ WRITE ZIPWITH SCAN CONCAT SPLIT
%token <(int*int)> TRUE FALSE NOT NEGATE AND OR OP BAND


%nonassoc ifprec letprec
%left OR
%left AND
%nonassoc NOT
%left EQ LTH
%left PLUS MINUS NEGATE
%left BAND
%left TIMES DIV

%start Prog
%type <Fasto.Prog> Prog
%type <Fasto.FunDec list> FunDecs
%type <Fasto.FunDec> Fun
%type <Fasto.Type> Type
%type <Fasto.Binding list> TypeIds
%type <Fasto.Exp> Exp
%type <Fasto.Exp list> Exps

%%

Prog :	  FunDecs EOF   { 
                ("_plus_" , Fasto.Int(0,0), [("a", Fasto.Int(0,0)), ("b", Fasto.Int(0,0))], Fasto.Plus ( Fasto.Var("a",(0,0)), Fasto.Var("b", (0,0)), (0,0)), (0,0))::
                ("_band_" , Fasto.Int(0,0), [("a", Fasto.Int(0,0)), ("b", Fasto.Int(0,0))], Fasto.Band ( Fasto.Var("a",(0,0)), Fasto.Var("b", (0,0)), (0,0)), (0,0))::
                ("_times_", Fasto.Int(0,0), [("a", Fasto.Int(0,0)), ("b", Fasto.Int(0,0))], Fasto.Times( Fasto.Var("a",(0,0)), Fasto.Var("b", (0,0)), (0,0)), (0,0))::
                ("_negate_",Fasto.Int(0,0), [("a", Fasto.Int(0,0))], Fasto.Negate( Fasto.Var("a",(0,0)), (0,0)), (0,0))::
                ("_and_"  , Fasto.Bool(0,0), [("a", Fasto.Bool(0,0)), ("b", Fasto.Bool(0,0))], Fasto.And( Fasto.Var("a",(0,0)), Fasto.Var("b", (0,0)), (0,0)), (0,0))::
                ("_or_"   , Fasto.Bool(0,0), [("a", Fasto.Bool(0,0)), ("b", Fasto.Bool(0,0))], Fasto.Or ( Fasto.Var("a",(0,0)), Fasto.Var("b", (0,0)), (0,0)), (0,0))::
                ("_not_",   Fasto.Bool(0,0), [("a", Fasto.Bool(0,0))], Fasto.Not( Fasto.Var("a",(0,0)), (0,0)), (0,0))::
                $1 
            }
;

FunDecs : FUN Fun FunDecs   { $2 :: $3 }
        | FUN Fun           { $2 :: [] }
;

Fun :     Type ID LPAR TypeIds RPAR EQ Exp 
			{ (#1 $2, $1, $4, $7, #2 $2) }
        | Type ID LPAR RPAR EQ Exp 
			{ (#1 $2, $1, [], $6, #2 $2) }
;

Type :	  INT		{ Fasto.Int $1 }
        | BOOL          { Fasto.Bool $1 }
        | CHAR          { Fasto.Char $1 }
        | LBRACKET Type RBRACKET { Fasto.Array ($2, $1) }
;

TypeIds : Type ID COMMA TypeIds
                        { (#1 $2, $1) :: $4 }
        | Type ID       { (#1 $2, $1) :: [] }
;

Exp :	  NUM            { Fasto.Num $1 }
        | ID             { Fasto.Var $1 }
        | CHARLIT        { Fasto.CharLit $1 }
        | STRINGLIT      { Fasto.StringLit $1 }
        | LCURLY Exps RCURLY
                         { Fasto.ArrayLit ($2, Fasto.UNKNOWN, $1) }

        | Exp PLUS  Exp  { Fasto.Plus ($1, $3, $2) }
        | Exp BAND  Exp  { Fasto.Band ($1, $3, $2) }
        | Exp MINUS Exp  { Fasto.Minus($1, $3, $2) }
        | Exp EQ    Exp  { Fasto.Equal($1, $3, $2) }
        | Exp LTH   Exp  { Fasto.Less ($1, $3, $2) }
        | IF Exp THEN Exp ELSE Exp %prec ifprec
                         { Fasto.If ($2, $4, $6, $1) }
        | ID LPAR Exps RPAR
                        { Fasto.Apply (#1 $1, $3, #2 $1) }

        | ID LPAR RPAR  { Fasto.Apply (#1 $1, [], #2 $1) }

        | READ LPAR Type RPAR
                        { Fasto.Read ($3, $1) }
        | WRITE LPAR Exp RPAR
                        { Fasto.Write ($3, Fasto.UNKNOWN, $1) }

        | IOTA LPAR Exp RPAR
                        { Fasto.Iota ($3, $1) }
        | REPLICATE LPAR Exp COMMA Exp RPAR
                        { Fasto.Replicate ($3, $5, Fasto.UNKNOWN, $1) }

        | REDUCE LPAR OP BAND COMMA Exp COMMA Exp RPAR
                        { Fasto.Reduce ("_band_", $6, $8, Fasto.UNKNOWN, $1) }
        | REDUCE LPAR OP PLUS COMMA Exp COMMA Exp RPAR
                        { Fasto.Reduce ("_plus_", $6, $8, Fasto.UNKNOWN, $1) }
        | REDUCE LPAR OP TIMES COMMA Exp COMMA Exp RPAR
                        { Fasto.Reduce ("_times_", $6, $8, Fasto.UNKNOWN, $1) }
        | REDUCE LPAR OP AND COMMA Exp COMMA Exp RPAR
                        { Fasto.Reduce ("_and_", $6, $8, Fasto.UNKNOWN, $1) }
        | REDUCE LPAR OP OR COMMA Exp COMMA Exp RPAR
                        { Fasto.Reduce ("_or_", $6, $8, Fasto.UNKNOWN, $1) }
        | REDUCE LPAR ID COMMA Exp COMMA Exp RPAR
                        { Fasto.Reduce (#1 $3, $5, $7, Fasto.UNKNOWN, $1) }

        | MAP LPAR OP NOT COMMA Exp RPAR
                        { Fasto.Map("_not_", $6, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }
        | MAP LPAR OP NEGATE COMMA Exp RPAR
                        { Fasto.Map("_negate_", $6, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }
        | MAP LPAR ID COMMA Exp RPAR
                        { Fasto.Map (#1 $3, $5, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }

        | SCAN LPAR OP PLUS COMMA Exp COMMA Exp RPAR
                        { Fasto.Scan ("_plus_", $6, $8, Fasto.UNKNOWN, $1) }
        | SCAN LPAR OP TIMES COMMA Exp COMMA Exp RPAR
                        { Fasto.Scan ("_times_", $6, $8, Fasto.UNKNOWN, $1) }
        | SCAN LPAR OP AND COMMA Exp COMMA Exp RPAR
                        { Fasto.Scan ("_and_", $6, $8, Fasto.UNKNOWN, $1) }
        | SCAN LPAR OP OR COMMA Exp COMMA Exp RPAR
                        { Fasto.Scan ("_or_", $6, $8, Fasto.UNKNOWN, $1) }
        | SCAN LPAR ID COMMA Exp COMMA Exp RPAR
                        { Fasto.Scan (#1 $3, $5, $7, Fasto.UNKNOWN, $1) }

        | ZIPWITH LPAR OP BAND COMMA Exp COMMA Exp RPAR
                        { Fasto.ZipWith ("_band_", $6, $8, Fasto.UNKNOWN, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }
        | ZIPWITH LPAR OP PLUS COMMA Exp COMMA Exp RPAR
                        { Fasto.ZipWith ("_plus_", $6, $8, Fasto.UNKNOWN, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }
        | ZIPWITH LPAR OP TIMES COMMA Exp COMMA Exp RPAR
                        { Fasto.ZipWith ("_times_", $6, $8, Fasto.UNKNOWN, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }
        | ZIPWITH LPAR OP AND COMMA Exp COMMA Exp RPAR
                        { Fasto.ZipWith ("_and_", $6, $8, Fasto.UNKNOWN, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }
        | ZIPWITH LPAR OP OR COMMA Exp COMMA Exp RPAR
                        { Fasto.ZipWith ("_or_", $6, $8, Fasto.UNKNOWN, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }
        | ZIPWITH LPAR ID COMMA Exp COMMA Exp RPAR
                        { Fasto.ZipWith (#1 $3, $5, $7, Fasto.UNKNOWN, Fasto.UNKNOWN, Fasto.UNKNOWN, $1) }


        | LPAR Exp RPAR { $2 }
        | LET ID EQ Exp IN Exp %prec letprec
                        { Fasto.Let (Fasto.Dec (#1 $2, $4, $3), $6, $1) }
        | ID LBRACKET Exp RBRACKET
                        { Fasto.Index (#1 $1, $3, Fasto.UNKNOWN, $2) }
        // Code added for examn
        | SPLIT LPAR Exp COMMA Exp RPAR
                        { Fasto.Split ($3, $5, Fasto.UNKNOWN, $1) }
        | CONCAT LPAR Exp COMMA Exp RPAR
                        { Fasto.Concat ($3, $5, Fasto.UNKNOWN, $1) }
        | SCAN LPAR OP BAND COMMA Exp COMMA Exp RPAR
                        { Fasto.Scan ("_band_", $6, $8, Fasto.UNKNOWN, $1) }
        // ------end ------


        | TRUE           { Fasto.Log(true, $1)      }
        | FALSE          { Fasto.Log(false,$1)      }
        | NEGATE Exp     { Fasto.Negate($2, $1)     }
        | NOT Exp        { Fasto.Not($2, $1)        }
        | Exp TIMES Exp  { Fasto.Times($1, $3, $2)  }
        | Exp DIV Exp    { Fasto.Divide($1, $3, $2) }
        | Exp AND Exp    { Fasto.And($1, $3, $2)    }
        | Exp OR  Exp    { Fasto.Or ($1, $3, $2)    }
;

Exps : Exp COMMA Exps   { $1 :: $3 }
    |  Exp              { $1 :: [] }
