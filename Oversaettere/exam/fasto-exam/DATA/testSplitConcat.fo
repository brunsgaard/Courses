// testing split and concat with different functions

// example program from the task description (testing optimised path)
fun [int] test() = let arr = split(1,{1, 2, 3, 4})
                   in write(concat(arr[1],arr[0])) // writes { 2 3 4 1 }

// split with non-empty and empty cases, and one concat, on int
fun [int] s2() = let a = iota(10)
              in let s1 = write(split(1,a))
              in let s2 = write(split(6,a))
              in let s3 = write(split(10,a))
              in write(concat(s1[1],s2[1]))

// testing concat with char
fun [char] c2() = let a = replicate(3,'a')
               in let b = replicate(2,'b')
               in let c = concat(a,b)
               in write(c) // prints "aaabb"

// testing optimisation (concat splitted arrays without new copy) with char
fun [char] c3() = let a = replicate(62,'a')
               in let b = split(30,a)
               // test unaligned access for splitted char arrays:
               in let unused = write(length(write(map(ord,b[1]))))
               in let c = concat(b[0],b[1])
               in write(map(idchar,c))

fun char idchar(char c) = c

fun int main() = length(test()) + length(s2()) + length(c2()) + length(c3())
